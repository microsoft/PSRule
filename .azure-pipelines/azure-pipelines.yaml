# Azure DevOps
# CI pipeline for PSRule

variables:
  version: '0.11.0'
  buildConfiguration: 'Release'
  disable.coverage.autogenerate: 'true'

# Use build number format, i.e. 0.1.0-B1811001
name: $(version)-B$(date:yyMM)$(rev:rrr)

trigger:
  branches:
    include:
    - 'master'
  tags:
    include:
    - 'v0.*'

pr:
  branches:
    include:
    - 'master'

stages:

# Build pipeline
- stage: Build
  displayName: Build
  jobs:
  - job:
    strategy:
      matrix:
        Linux:
          displayName: 'Linux'
          imageName: 'ubuntu-16.04'
        MacOS:
          displayName: 'MacOS'
          imageName: 'macos-10.13'
        Windows:
          displayName: 'Windows'
          imageName: 'vs2017-win2016'
          publish: 'true'
          analysis: 'true'
          coverage: 'true'
    pool:
      vmImage: $(imageName)
    displayName: 'PowerShell'
    steps:

    # Install pipeline dependencies
    - powershell: ./.azure-pipelines/pipeline-deps.ps1
      displayName: 'Install dependencies'

    # Build module
    - powershell: Invoke-Build -Configuration $(buildConfiguration) -Build $(Build.BuildNumber)
      displayName: 'Build module'

    # Run module benchmark
    - powershell: Invoke-Build Benchmark -Configuration $(buildConfiguration) -Build $(Build.BuildNumber)
      displayName: 'Benchmark'
      condition: eq(variables['benchmark'], 'true')

    # Run SonarCloud analysis
    - powershell: dotnet tool install --global dotnet-sonarscanner
      displayName: 'Install Sonar scanner'
      condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['analysis'], 'true'))

    - script: dotnet sonarscanner begin /k:"BernieWhite_PSRule" /o:"berniewhite-github" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login=$(sonarQubeToken) /v:"$(Build.BuildNumber)" /d:sonar.cs.vscoveragexml.reportsPaths="reports/" /d:sonar.cs.xunit.reportsPaths="reports/"
      displayName: 'Prepare SonarCloud'
      condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['analysis'], 'true'))

    - script: dotnet build
      displayName: 'Build solution for analysis'
      condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['analysis'], 'true'))

    - script: dotnet sonarscanner end /d:sonar.login=$(sonarQubeToken)
      displayName: 'Complete SonarCloud'
      condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['analysis'], 'true'))

    # DotNet test results
    - task: PublishTestResults@2
      displayName: 'Publish unit test results'
      inputs:
        testRunTitle: 'DotNet on $(imageName)'
        testRunner: VSTest
        testResultsFiles: 'reports/*.trx'
        mergeTestResults: true
        platform: $(imageName)
        configuration: $(buildConfiguration)
        publishRunAttachments: true
      condition: succeededOrFailed()

    # Pester test results
    - task: PublishTestResults@2
      displayName: 'Publish Pester results'
      inputs:
        testRunTitle: 'Pester on $(imageName)'
        testRunner: NUnit
        testResultsFiles: 'reports/pester-unit.xml'
        mergeTestResults: true
        platform: $(imageName)
        configuration: $(buildConfiguration)
        publishRunAttachments: true
      condition: succeededOrFailed()

    # PSRule results
    - task: PublishTestResults@2
      displayName: 'Publish PSRule results'
      inputs:
        testRunTitle: 'PSRule on $(imageName)'
        testRunner: NUnit
        testResultsFiles: 'reports/rule.report.xml'
        mergeTestResults: true
        platform: $(imageName)
        configuration: $(buildConfiguration)
        publishRunAttachments: true
      condition: succeededOrFailed()

    # Generate Code Coverage report
    - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
      displayName: 'Code coverage report generator'
      inputs:
        reports: 'reports\pester-coverage.xml'
        targetdir: 'reports\coverage'
        sourcedirs: 'src\PSRule'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
        tag: $(Build.BuildNumber)
      condition: eq(variables['coverage'], 'true')

    # Publish Code Coverage report
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Pester code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'reports/coverage/Cobertura.xml'
        reportDirectory: 'reports/coverage'
      condition: eq(variables['coverage'], 'true')

    # Generate artifacts
    - task: PublishPipelineArtifact@1
      displayName: 'Publish module'
      inputs:
        artifactName: PSRule
        targetPath: out/modules/PSRule
      condition: and(succeeded(), eq(variables['publish'], 'true'))

    # - task: PublishPipelineArtifact@1
    #   displayName: 'Publish module package'
    #   inputs:
    #     artifactName: PSRule.nupkg
    #     targetPath: out/nuget/PSRule.$(Build.BuildNumber).nupkg
    #   condition: and(succeeded(), eq(variables['publish'], 'true'))

# Release pipeline
- stage: Release
  displayName: Release
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v0.'))
  jobs:
  - job:
    displayName: Live
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      isPreRelease: $[contains(variables['Build.SourceBranchName'], '-B')]
    steps:

    # Download module
    - task: DownloadPipelineArtifact@1
      displayName: 'Download module'
      inputs:
        artifactName: PSRule
        downloadPath: $(Build.SourcesDirectory)/out/modules/PSRule

    # Install pipeline dependencies
    - powershell: ./.azure-pipelines/pipeline-deps.ps1
      displayName: 'Install dependencies'

    # Install pipeline dependencies and build module
    - powershell: Invoke-Build Release -ApiKey $(apiKey)
      displayName: 'Publish module'

    # Update GitHub release
    - task: GitHubRelease@1
      displayName: 'GitHub release'
      inputs:
        gitHubConnection: 'AzureDevOps-PSRule'
        repositoryName: '$(Build.Repository.Name)'
        action: edit
        tag: '$(Build.SourceBranchName)'
        releaseNotesSource: inline
        releaseNotesInline: 'See [change log](https://github.com/BernieWhite/PSRule/blob/master/CHANGELOG.md)'
        assetUploadMode: replace
        addChangeLog: false
        isPreRelease: $(isPreRelease)
