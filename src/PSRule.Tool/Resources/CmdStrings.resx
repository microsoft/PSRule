<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cmd_Description" xml:space="preserve">
    <value>PSRule CLI</value>
  </data>
  <data name="Module_Init_Description" xml:space="preserve">
    <value>Initialize a new or update an existing module lock file based on options.</value>
  </data>
  <data name="Module_List_Description" xml:space="preserve">
    <value>List any module and the installed versions from the lock file.</value>
  </data>
  <data name="Module_Add_Description" xml:space="preserve">
    <value>Add one or more modules to the lock file.</value>
  </data>
  <data name="Module_Add_Force_Description" xml:space="preserve">
    <value>Override the module even if it already is added to the module list.</value>
  </data>
  <data name="Module_Add_SkipVerification_Description" xml:space="preserve">
    <value>Skip verification of the module.</value>
  </data>
  <data name="Module_Add_Version_Description" xml:space="preserve">
    <value>The target version of the module to add.</value>
  </data>
  <data name="Module_Description" xml:space="preserve">
    <value>Manage or restore modules tracked by the module lock file and configured options.</value>
  </data>
  <data name="Module_Module_Description" xml:space="preserve">
    <value>The name of one or more modules.</value>
  </data>
  <data name="Module_Remove_Description" xml:space="preserve">
    <value>Remove one or more modules from the lock file.</value>
  </data>
  <data name="Module_Upgrade_Description" xml:space="preserve">
    <value>Upgrade to the latest versions of any modules within the lock file.</value>
  </data>
  <data name="Global_Debug_Description" xml:space="preserve">
    <value>Return debug output.</value>
  </data>
  <data name="Run_Module_Description" xml:space="preserve">
    <value>The name of one or more modules that contain rules or resources to use during a run.</value>
  </data>
  <data name="Global_Option_Description" xml:space="preserve">
    <value>Specifies the path to an options file.</value>
  </data>
  <data name="Global_Path_Description" xml:space="preserve">
    <value>The path to run commands within. By default, this is the current working directory.</value>
  </data>
  <data name="Global_Verbose_Description" xml:space="preserve">
    <value>Return verbose output.</value>
  </data>
  <data name="Module_Restore_Description" xml:space="preserve">
    <value>Restore from the module lock file and configured options.</value>
  </data>
  <data name="Module_Restore_Force_Description" xml:space="preserve">
    <value>Restore modules even when an existing version that meets constraints is already installed locally.</value>
  </data>
  <data name="Run_Baseline_Description" xml:space="preserve">
    <value>The name of a specific baseline to use.</value>
  </data>
  <data name="Run_Description" xml:space="preserve">
    <value>Run rules against an input path and output the results.</value>
  </data>
  <data name="Run_Outcome_Description" xml:space="preserve">
    <value>Specifies the rule results to show in output. By default, Pass/ Fail/ Error results are shown.</value>
  </data>
  <data name="Module_Init_Force_Description" xml:space="preserve">
    <value>Force the creation of a new module lock file, even if one already exists.</value>
  </data>
  <data name="Run_InputPath_Description" xml:space="preserve">
    <value>The file or directory path to search for input file to use during a run. By default, this is the current working path.</value>
  </data>
  <data name="Run_OutputFormat_Description" xml:space="preserve">
    <value>Specifies the format to use when outputting results.</value>
  </data>
  <data name="Run_OutputPath_Description" xml:space="preserve">
    <value>Specifies a path to write results to.</value>
  </data>
</root>