<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BaselineObsolete" xml:space="preserve">
    <value>The baseline '{0}' is obsolete. Consider switching to an alternative baseline.</value>
    <comment>Occurs when a baseline is used that has been flagged as obsolete.</comment>
  </data>
  <data name="ConstrainedTargetBinding" xml:space="preserve">
    <value>Binding functions are not supported in this language mode.</value>
  </data>
  <data name="DebugPropertyObsolete" xml:space="preserve">
    <value>{0}: The property '${1}.{2}' is obsolete and will be removed in the next major version.</value>
  </data>
  <data name="DebugTargetIfMismatch" xml:space="preserve">
    <value>Target failed If precondition</value>
  </data>
  <data name="DebugTargetTypeMismatch" xml:space="preserve">
    <value>Target failed Type precondition</value>
  </data>
  <data name="DependencyCircularReference" xml:space="preserve">
    <value>A circular rule dependency was detected. The rule '{0}' depends on '{1}' which also depend on '{0}'.</value>
    <comment>Occurs when rules interdepend on each other.</comment>
  </data>
  <data name="DependencyNotFound" xml:space="preserve">
    <value>The dependency '{0}' for '{1}' could not be found. Check that the rule is defined in a .Rule.ps1 file within the search path.</value>
    <comment>Occurs when a rule dependency is not discovered.</comment>
  </data>
  <data name="DuplicateRuleId" xml:space="preserve">
    <value>A rule with the same name '{0}' already exists.</value>
    <comment>Occurs when the same rule name is used.</comment>
  </data>
  <data name="ErrorPipelineException" xml:space="preserve">
    <value>One or more errors occured.</value>
  </data>
  <data name="ExistsTrue" xml:space="preserve">
    <value>Exists: {0}</value>
  </data>
  <data name="FoundModules" xml:space="preserve">
    <value>[PSRule][D] -- Found {0} PSRule module(s)</value>
  </data>
  <data name="InvalidErrorAction" xml:space="preserve">
    <value>An invalid ErrorAction ({0}) was specified for rule at {1}. Ignore | Stop are supported.</value>
  </data>
  <data name="InvalidRuleNesting" xml:space="preserve">
    <value>Rule nesting was detected for rule at {0}. Rules must not be nested.</value>
    <comment>Occurs when a rule is nested in another rule.</comment>
  </data>
  <data name="InvalidRuleResult" xml:space="preserve">
    <value>An invalid rule result was returned for {0}. Conditions must return boolean $True or $False.</value>
  </data>
  <data name="KeywordConditionScope" xml:space="preserve">
    <value>The keyword '{0}' can only be used within a Rule block.</value>
  </data>
  <data name="KeywordRuleScope" xml:space="preserve">
    <value>The keyword '{0}' can only be used within a Rule block or script precondition.</value>
  </data>
  <data name="KeywordScriptScope" xml:space="preserve">
    <value>The keyword '{0}' can not be nested in a Rule block.</value>
  </data>
  <data name="LaunchBrowser" xml:space="preserve">
    <value>Please open your browser to the following location: {0}</value>
  </data>
  <data name="MatchSingleName" xml:space="preserve">
    <value>Wildcard match requires exactly one name.</value>
  </data>
  <data name="MatchTrue" xml:space="preserve">
    <value>Matches: {0}</value>
  </data>
  <data name="ObjectNotProcessed" xml:space="preserve">
    <value>Target object '{0}' has not been processed because no matching rules were found.</value>
  </data>
  <data name="OptionsNotFound" xml:space="preserve">
    <value>Options file does not exist.</value>
    <comment>Occurs when explicit path to a YAML file is specified and doesn't exist.</comment>
  </data>
  <data name="OptionsSourceComment" xml:space="preserve">
    <value># Source: {0}</value>
  </data>
  <data name="OutcomeRuleFail" xml:space="preserve">
    <value>[FAIL] -- {0}:: Reported for '{1}'</value>
  </data>
  <data name="OutcomeRulePass" xml:space="preserve">
    <value>[PASS] -- {0}:: Reported for '{1}'</value>
  </data>
  <data name="PropertyObsolete" xml:space="preserve">
    <value>The property '${0}.{1}' is obsolete and will be removed in the next major version.</value>
  </data>
  <data name="ReadJsonFailed" xml:space="preserve">
    <value>Read JSON failed.</value>
  </data>
  <data name="RequiredVersionMismatch" xml:space="preserve">
    <value>The module version '{1}' for '{0}' does not match the required version '{2}'.</value>
  </data>
  <data name="RuleErrorPipelineException" xml:space="preserve">
    <value>One or more rules reported errors.</value>
  </data>
  <data name="RuleFailPipelineException" xml:space="preserve">
    <value>One or more rules reported failure.</value>
  </data>
  <data name="RuleInconclusive" xml:space="preserve">
    <value>Inconclusive result reported for '{1}' @{0}.</value>
  </data>
  <data name="RuleNotFound" xml:space="preserve">
    <value>Could not find a matching rule. Please check that Path, Name and Tag parameters are correct.</value>
  </data>
  <data name="RuleParameterNotFound" xml:space="preserve">
    <value>Could not find required rule definition parameter '{0}' on rule at {1}.</value>
    <comment>Occurs when a rule definition is missing a mandatory parameter.</comment>
  </data>
  <data name="RulePathNotFound" xml:space="preserve">
    <value>No matching .Rule.ps1 files were found. Rule definitions should be saved into script files with the .Rule.ps1 extension.</value>
  </data>
  <data name="RuleStackTrace" xml:space="preserve">
    <value>at Rule '{0}', {1}: line {2}</value>
  </data>
  <data name="ScanModule" xml:space="preserve">
    <value>[PSRule][D] -- Scanning for source files in module: {0}</value>
  </data>
  <data name="ScanSource" xml:space="preserve">
    <value>[PSRule][D] -- Scanning for source files: {0}</value>
  </data>
  <data name="ScriptNotFound" xml:space="preserve">
    <value>The script was not found.</value>
    <comment>Occurs when the script rule file specified does not exist.</comment>
  </data>
  <data name="SerializeNullPSObject" xml:space="preserve">
    <value>Can not serialize a null PSObject.</value>
  </data>
  <data name="ShouldCreatePath" xml:space="preserve">
    <value>Create path</value>
  </data>
  <data name="ShouldWriteFile" xml:space="preserve">
    <value>Write file</value>
  </data>
  <data name="SourceNotFound" xml:space="preserve">
    <value>The source was not found.</value>
    <comment>Occurs when the source file specified does not exist.</comment>
  </data>
  <data name="UsingInvariantCulture" xml:space="preserve">
    <value>Using invariant culture may cause rule infomation to be displayed incorrectly. Consider using -Culture or set the Output.Culture option.</value>
    <comment>Occurs when the pipeline uses an invariant culture.</comment>
  </data>
  <data name="VariableConditionScope" xml:space="preserve">
    <value>The variable '${0}' can only be used within a Rule block.</value>
  </data>
  <data name="VersionConstraintInvalid" xml:space="preserve">
    <value>The version constraint '{0}' is not valid.</value>
    <comment>When a version constrain is used with $Assert.Version that is invalid.</comment>
  </data>
  <data name="WithinLikeNotString" xml:space="preserve">
    <value>The Within parameter Value must be a string when the Like parameter is used.</value>
  </data>
  <data name="WithinTrue" xml:space="preserve">
    <value>Within: {0}</value>
  </data>
</root>