<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Compare" xml:space="preserve">
    <value>The field value '{0}' can not be compared with '{1}'.</value>
  </data>
  <data name="Contains" xml:space="preserve">
    <value>The field '{0}' does not contain '{1}'.</value>
  </data>
  <data name="EndsWith" xml:space="preserve">
    <value>The field '{0}' does not end with '{1}'.</value>
  </data>
  <data name="Exists" xml:space="preserve">
    <value>None of the field(s) existed: {0}</value>
    <comment>Included when none of the fields exist.</comment>
  </data>
  <data name="ExistsNot" xml:space="preserve">
    <value>The field(s) existed: {0}</value>
    <comment>Included when any of the fields exist and the -Not switch is used.</comment>
  </data>
  <data name="FileHeader" xml:space="preserve">
    <value>The header was not set.</value>
  </data>
  <data name="FilePath" xml:space="preserve">
    <value>The file '{0}' does not exist.</value>
  </data>
  <data name="Greater" xml:space="preserve">
    <value>The value '{0}' was not &gt; '{1}'.</value>
  </data>
  <data name="GreaterOrEqual" xml:space="preserve">
    <value>The value '{0}' was not &gt;= '{1}'.</value>
  </data>
  <data name="HasExpectedFieldValue" xml:space="preserve">
    <value>The field '{0}' is set to '{1}'.</value>
  </data>
  <data name="HasField" xml:space="preserve">
    <value>The field '{0}' does not exist.</value>
  </data>
  <data name="HasFieldValue" xml:space="preserve">
    <value>The value of '{0}' is null or empty.</value>
  </data>
  <data name="HasJsonSchema" xml:space="preserve">
    <value>None of the specified schemas match '{0}'.</value>
  </data>
  <data name="In" xml:space="preserve">
    <value>The field value '{0}' was not included in the set.</value>
    <comment>The field value '{0}' was not included in the set.</comment>
  </data>
  <data name="IsLetter" xml:space="preserve">
    <value>The value '{0}' does not contain only letters.</value>
  </data>
  <data name="IsLower" xml:space="preserve">
    <value>The value '{0}' does not contain only lowercase characters.</value>
  </data>
  <data name="IsUpper" xml:space="preserve">
    <value>The value '{0}' does not contain only uppercase characters.</value>
  </data>
  <data name="JsonSchemaInvalid" xml:space="preserve">
    <value>Failed schema validation on {0}. {1}</value>
  </data>
  <data name="JsonSchemaNotFound" xml:space="preserve">
    <value>The JSON schema '{0}' could not be found.</value>
  </data>
  <data name="Less" xml:space="preserve">
    <value>The value '{0}' was not &lt; '{1}'.</value>
  </data>
  <data name="LessOrEqual" xml:space="preserve">
    <value>The value '{0}' was not &lt;= '{1}'.</value>
  </data>
  <data name="Match" xml:space="preserve">
    <value>None of the regex(s) matched: {0}</value>
    <comment>Incldued when none of the regular expressions match.</comment>
  </data>
  <data name="MatchNot" xml:space="preserve">
    <value>The regex '{0}' matched.</value>
    <comment>Included when any of the regular expressions match and the -Not switch is used.</comment>
  </data>
  <data name="MatchPattern" xml:space="preserve">
    <value>The field value '{0}' does not match the pattern '{1}'.</value>
  </data>
  <data name="NotIn" xml:space="preserve">
    <value>The field value '{0}' was in the set.</value>
    <comment>The field value '{0}' was in the set.</comment>
  </data>
  <data name="NotMatchPattern" xml:space="preserve">
    <value>The field value '{0}' matches the pattern '{1}'.</value>
  </data>
  <data name="NullOrEmpty" xml:space="preserve">
    <value>The field '{0}' is not empty.</value>
  </data>
  <data name="NullOrEmptyParameter" xml:space="preserve">
    <value>The parameter '{0}' is null or empty.</value>
  </data>
  <data name="NullParameter" xml:space="preserve">
    <value>The parameter '{0}' is null.</value>
  </data>
  <data name="StartsWith" xml:space="preserve">
    <value>The field '{0}' does not start with '{1}'.</value>
  </data>
  <data name="String" xml:space="preserve">
    <value>The field value '{0}' is not a string.</value>
  </data>
  <data name="TypeOf" xml:space="preserve">
    <value>None of the type name(s) match: {0}</value>
    <comment>Included when none of the specified type names match.</comment>
  </data>
  <data name="Version" xml:space="preserve">
    <value>The field value '{0}' is not a version string.</value>
  </data>
  <data name="VersionContraint" xml:space="preserve">
    <value>The version '{0}' does not match the constraint '{1}'.</value>
  </data>
  <data name="Within" xml:space="preserve">
    <value>The field value didn't match the set.</value>
    <comment>Included when the value does not match the set.</comment>
  </data>
  <data name="WithinNot" xml:space="preserve">
    <value>The value '{0}' was within the set.</value>
    <comment>Included when any of the set match.</comment>
  </data>
</root>